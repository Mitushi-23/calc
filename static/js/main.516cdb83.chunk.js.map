{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","inputRef","useRef","handleclick","e","concat","target","name","backspace","slice","length","clear","calculate","eval","toString","error","useEffect","current","focus","className","type","value","ref","onClick","id","rel","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iyBAGA,SAASA,MACP,cAAyBC,oDAAS,IAAlC,0IAAOC,OAAP,cAAcC,UAAd,cACMC,SAASC,kDAAO,MAGtB,SAASC,YAAYC,GACjBJ,UAAUD,OAAOM,OAAOD,EAAEE,OAAOC,OAErC,SAASC,YACPR,UAAUD,OAAOU,MAAM,EAAEV,OAAOW,OAAO,IAEzC,SAASC,QACPX,UAAU,IAEZ,SAASY,YACP,IACEZ,UAAUa,KAAKd,QAAQe,YAEzB,MAAMC,OACJf,UAAU,UAGd,OAnBAgB,sDAAU,kBAAIf,SAASgB,QAAQC,WAoB7B,+HACA,oEACA,oEACE,iEAAIC,UAAU,KAAd,qDAEF,mEAAKA,UAAU,YAAf,UACA,4EACE,oEAAOC,KAAK,OAAOC,MAAOtB,OAAQuB,IAAKrB,aAEvC,mEAAKkB,UAAU,SAAf,UACA,qEAAQA,UAAU,YAAYI,QAASZ,MAAOa,GAAG,QAAjD,mBACE,qEAAQL,UAAU,YAAYI,QAASf,UAAvC,eACA,qEAAQD,KAAK,IAAIY,UAAU,YAAYI,QAASpB,YAAhD,kBACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIY,UAAU,YAAYI,QAASpB,YAAhD,kBACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIY,UAAU,YAAYI,QAASpB,YAAhD,oBACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIY,UAAU,YAAYI,QAASpB,YAAhD,eACA,qEAAQI,KAAK,IAAIgB,QAASpB,YAA1B,eACA,qEAAQI,KAAK,IAAIY,UAAU,YAAYI,QAASpB,YAAhD,eACA,qEAAQqB,GAAG,SAASL,UAAU,YAAYI,QAASX,UAAnD,qBAIJ,kEAAIO,UAAU,MAAd,yBAAgC,gEAAGM,IAAI,aAAanB,OAAO,SAASoB,KAAK,8CAAzC,kCAKrB7B,2B,iIClDT8B,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAApC,GACLgC,QAAQhC,MAAM,4CAA6CA,M,WCzFnEqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzD,EAAA,EAAD,MAEF0D,SAASC,eAAe,SDWjB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,QAAwB7B,OAAOC,SAASJ,MACpDiC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,QAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCpCjCE,K","file":"static/js/main.516cdb83.chunk.js","sourcesContent":["import React, { useState,useEffect,useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [result,setResult]=useState(\"\");\n  const inputRef=useRef(null);\n  useEffect(()=>inputRef.current.focus()); \n  \n  function handleclick(e){\n      setResult(result.concat(e.target.name));\n  }\n  function backspace(){\n    setResult(result.slice(0,result.length-1))\n  }\n  function clear(){\n    setResult(\"\")\n  }\n  function calculate(){\n    try{\n      setResult(eval(result).toString());\n    }\n    catch(error){\n      setResult(\"Error\");\n    }\n  }\n  return (\n    <>\n    <br></br>\n    <br></br>\n      <h1 className=\"h1\">A Simple Calculator built using ReactJS</h1>\n\n    <div className=\"container\">\n    <form>\n      <input type=\"text\" value={result} ref={inputRef}/>\n    </form>\n      <div className=\"keypad\">\n      <button className=\"highlight\" onClick={clear} id=\"clear\">Clear</button>\n        <button className=\"highlight\" onClick={backspace}>C</button>  \n        <button name=\"/\" className=\"highlight\" onClick={handleclick}>&divide;</button>\n        <button name=\"7\" onClick={handleclick}>7</button>\n        <button name=\"8\" onClick={handleclick}>8</button>\n        <button name=\"9\" onClick={handleclick}>9</button>\n        <button name=\"*\" className=\"highlight\" onClick={handleclick}>&times;</button>\n        <button name=\"4\" onClick={handleclick}>4</button>\n        <button name=\"5\" onClick={handleclick}>5</button>\n        <button name=\"6\" onClick={handleclick}>6</button>\n        <button name=\"-\" className=\"highlight\" onClick={handleclick}>&ndash;</button>\n        <button name=\"1\" onClick={handleclick}>1</button>\n        <button name=\"2\" onClick={handleclick}>2</button>\n        <button name=\"3\" onClick={handleclick}>3</button>\n        <button name=\"+\" className=\"highlight\" onClick={handleclick}>+</button>\n        <button name=\"0\" onClick={handleclick}>0</button>\n        <button name=\".\" className=\"highlight\" onClick={handleclick}>.</button>\n        <button id=\"result\" className=\"highlight\" onClick={calculate}>=</button>\n      </div>\n    \n    </div>\n    <h1 className=\"h12\">Designed by <a rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/varunherlekar/calculator\">Varun Herlekar</a></h1>\n\n    </>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}